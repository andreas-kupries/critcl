'\"
'\" Generated from file 'critcl_objtype\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2011-2018 Andreas Kupries
'\"
.TH "critcl::objtype" n 0 doc "C Runtime In Tcl (CriTcl)"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
critcl::objtype \- CriTcl Utilities: Custom Tcl_ObjTypes
.SH SYNOPSIS
package require \fBTcl  8\&.4\fR
.sp
package require \fBcritcl  ?3\&.1?\fR
.sp
package require \fBcritcl::objtype  ?0?\fR
.sp
\fB::critcl::objtype handle\fR \fIname\fR ?\fIoption\&.\&.\&.\fR?
.sp
\fB::critcl::objtype structure\fR \fIname\fR \fIspec\fR ?\fIoption\&.\&.\&.\fR?
.sp
.BE
.SH DESCRIPTION
.PP
\fIC Runtime In Tcl\fR, or \fICriTcl\fR , is a system for compiling C code
embedded in Tcl on the fly and either loading the resulting objects into Tcl for
immediate use or packaging them for distribution\&.  Use \fICriTcl\fR to improve
performance by rewriting in C those routines that are performance bottlenecks\&.
.PP
This document is the reference manpage for the \fBcritcl::objtype\fR
package\&. This package provides convenience commands for advanced functionality
built on top of the critcl core\&.
.PP
While Tcl comes with a variety of useful value types
(\fBTcl_ObjType\fR) built into the core there are situations which are best
dealt by using a custom Tcl_ObjType to handle the special values it came with\&.
.PP
With this package a developer can focus on the core handling for the
custom value, i\&.e\&. allocation, conversion into and out of strings, release,
etc\&., without having to deal with the boilerplate around it\&.
.PP
It's intended audience are mainly developers wishing to write Tcl
packages with embedded C code\&.
.PP
This package resides in the Core Package Layer of CriTcl\&.
.PP
.PS
.nf
+----------------+
|Applications    |
| critcl         |
| critcl::app    |
+----------------+

*================*
|Core Packages   |
| critcl         |
| critcl::util   |
*================*

+----------------+
|Support Packages|
| stubs::*       |
| md5, platform  |
|  \&.\&.\&.           |
+----------------+

.fi
.PE
.PP
.SH API
.TP
\fB::critcl::objtype handle\fR \fIname\fR ?\fIoption\&.\&.\&.\fR?
This command creates the C code for a custom \fBTcl_ObjType\fR with the
specified \fIname\fR\&.
\fIBy default\fR it assumes the existence of a reference-counted opaque C
type of the same name, with five C functions to access the same, whose names
are derived from the name of the C type\&. The functions are expected to have
the signatures and behaviour given below:
.RS
.TP
void \fB\fIname\fR_ref\fR (<name> \fIx\fR)
Aquire a reference to object \fIx\fR\&.
.TP
void \fB\fIname\fR_unref\fR (<name> \fIx\fR)
Release a reference to object \fIx\fR\&. The function has to destroy \fIx\fR
when its reference counts drops below \fB1\fR\&.
.TP
void \fB\fIname\fR_to_string\fR (<name> \fIx\fR, Tcl_DString* \fIds\fR)
Serialize object \fIx\fR into the \fBTcl_DString*\fR variable \fIds\fR\&.
The DString is initialized and empty when the function is called\&.
.TP
<name> \fB\fIname\fR_to_value\fR (Tcl_Interp* \fIinterp\fR, Tcl_Obj* \fIobj\fR)
Deserialize (the string representation of) \fIobj\fR into an object of the
type and return it\&. The function has to return \fBNULL\fR on error\&.
.TP
int \fB\fIname\fR_refcount\fR (<name> \fIx\fR)
Return the number of references to \fIx\fR\&. Note that the generated C code
uses this function only in \fBTRACE_\&.\&.\&.\fR statements\&.
.RE
.IP
All of the above can be overridden by one or more option arguments following
the \fIname\fR\&. The recognized options are:
.RS
.TP
\fB-type\fR \fIstring\fR
This option overrides the name of the C type managed by the new type\&. The
names of the expected functions change accordingly, if not overridden by any
of the following options\&.
.TP
\fB-ref\fR \fIstring\fR
.TP
\fB-unref\fR \fIstring\fR
.TP
\fB-refcount\fR \fIstring\fR
.TP
\fB-2value\fR \fIstring\fR
.TP
\fB-2string\fR \fIstring\fR
These options override the names of the functions used to access the C type\&.
.TP
\fB-trace\fR \fIbool\fR
By default the \fBTRACE\&.\&.\&.\fR statements embedded into the generated C code
of the new type are inactive\&.
This option allows them to activated\&. Note, this will be a source change,
affecting the package build\&. This is not a runtime flag\&.
.RE
.sp
The result of the command is an empty string\&.
.sp
The actual results are found in the header file generated by
the command\&.
.TP
\fB::critcl::objtype structure\fR \fIname\fR \fIspec\fR ?\fIoption\&.\&.\&.\fR?
This command creates the C code for a custom \fBTcl_ObjType\fR with the
specified \fIname\fR and the structure fields defined by the \fIspec\fR\&.
.sp
Internally this form is reduced to a \fBhandle\fR, with the generator
not only emitting the boiler plate needed for the type itself, but also
emitting the code implementing the C structure and opaque type it uses\&.
.sp
The \fIspec\fR is expected to be a single list of alternating type and
field names, i\&.e\&. each type name is followed by the name of field the type
applies to\&.
The acceptable type names are all known Critcl argument types which have an
associated \fBcritcl::argtype2string\fR definition\&. This definition specifies
how to serialize a value of the type into a \fBTcl_DString*\fR variable\&.
.sp
Currently the only types doing so are a subset of the basic scalars,
namely \fBint\fR, \fBlong\fR, \fBboolean\fR, \fBdouble\fR, and
\fBfloat\fR, further their aliases, and the associated sets of common range
restrictions\&.
.sp
The nature of the string representation used for the new type is guided
by the options following \fIname\fR and \fIspec\fR\&.
.RS
.TP
\fB-format\fR \fBdict\fR|\fBlist\fR
This option chooses between dictionary and list representations\&.  In a
dictionary representation the fields are named, enabling deserialization from
any order\&. In the list representation the values are simply listed in their
order of specification, and deserialized in that same order\&.
.sp
The default is \fBdict\fR\&.
.TP
\fB-tagged\fR \fIboolean\fR
This option determines if the string representation comes with a leading tag
indicating the type of the entire string value, or not\&.
.sp
The default is \fBtrue\fR, i\&.e\&. \fItagged\fR\&.
.TP
\fB-trace\fR \fIboolean\fR
By default the \fBTRACE\&.\&.\&.\fR statements embedded into the generated C code
of the new type are inactive\&.
This option allows them to activated\&. Note, this will be a source change,
affecting the package build\&. This is not a runtime flag\&.
.RE
.sp
The result of the command is an empty string\&.
.sp
The actual results are found in the header file generated by
the command\&.
.PP
.SH EXAMPLES
The examples show the various forms of specification, and for structure the
different possible string representations the generator can emit\&.
.SS HANDLE
.CS


    # All defaults
    critcl::objtype handle point

    # C type override
    critcl::objtype handle point -type pointxy

    # Full override, C type and function names\&.
    critcl::objtype handle point -type pointxy	\\\\
        -ref      2d_aquire			\\\\
        -unref    2d_release			\\\\
        -refcount 2d_references			\\\\
        -2string  2d_serialize			\\\\
        -2value   2d_deserialize

.CE
.SS "STRUCTURE - TAGGED DICT"
.CS


    critcl::objtype structure pointxy {
        double x
        double y
    }
    # string rep: {pointxy {x 0\&.0 y 0\&.0}}

.CE
.SS "STRUCTURE - DICT"
.CS


    critcl::objtype structure pointxy {
        double x
        double y
    } -tagged false
    # string rep: {x 0\&.0 y 0\&.0}

.CE
.SS "STRUCTURE - TAGGED LIST"
.CS


    critcl::objtype structure pointxy {
        double x
        double y
    } -format list
    # string rep: {pointxy 0\&.0 0\&.0}
    #                      x   y

.CE
.SS "STRUCTURE - LIST"
.CS


    critcl::objtype structure pointxy {
        double x
        double y
    } -format list -tagged false
    # string rep: {0\&.0 0\&.0}
    #              x   y

.CE
.SH AUTHORS
Andreas Kupries
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such at \fIhttps://github\&.com/andreas-kupries/critcl\fR\&.
Please also report any ideas for enhancements you may have for either
package and/or documentation\&.
.SH KEYWORDS
C code, Embedded C Code, Tcl_Obj, Tcl_ObjType, code generator, compile & run, compiler, dynamic code generation, dynamic compilation, generate package, linker, on demand compilation, on-the-fly compilation
.SH CATEGORY
Glueing/Embedded C code
.SH COPYRIGHT
.nf
Copyright (c) 2011-2018 Andreas Kupries

.fi