'\"
'\" Generated from file '/home/aku/Projects/Critcl/dev-critcl/embedded/man/files/critcl_class.n' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2011-2012 Andreas Kupries
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "critcl::class" n 1 doc "C Runtime In Tcl (CriTcl)"
.BS
.SH NAME
critcl::class \- CriTcl Utilities: C Classes
.SH SYNOPSIS
package require \fBTcl  8.4\fR
.sp
package require \fBcritcl  ?3.1?\fR
.sp
package require \fBcritcl::class  ?1?\fR
.sp
\fB::critcl::class::def\fR \fIname\fR \fIscript\fR
.sp
\fBconstructor\fR \fIbody\fR ?\fIpostbody\fR?
.sp
\fBdestructor\fR \fIbody\fR
.sp
\fBfield\fR \fIctype\fR \fIname\fR ?\fIcomment\fR?
.sp
\fBinclude\fR \fIpath\fR
.sp
\fBmdef\fR \fIname\fR \fIbody\fR
.sp
\fBmdef\fR \fIname\fR \fBas\fR \fIfunname\fR ?\fIarg\fR...?
.sp
\fBsupport\fR \fIcode\fR
.sp
\fBtype\fR \fIname\fR
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to the \fIC Runtime In Tcl\fR, \fICriTcl\fR for short, a
system to build C extension packages for Tcl on the fly, from C code
embedded within Tcl scripts, for all who wish to make their code go
faster.
.PP
This document is the reference manpage for the \fBcritcl::class\fR
package. This package provides convenience commands for advanced
functionality built on top of the core.
Namely, the specification of classes and objects without having to
write all the required boilerplate, only the methods themselves,
essentially.
Its intended audience are mainly developers wishing to write Tcl
packages with embedded C code.
.PP
This package resides in the Core Package Layer of CriTcl.
.PP
.PS
.nf
+----------------+
|Applications    |
|     critcl     |
+----------------+

*================*
|Core Packages   |
|     critcl     |
*================*

+----------------+
|Support Packages|
|  (platform)... |
+----------------+

.fi
.PE
.PP
.SH API
.TP
\fB::critcl::class::def\fR \fIname\fR \fIscript\fR
This command defines a new class \fIname\fR, where \fIname\fR is the
name of the Tcl command representing the class. The \fIscript\fR
provides the specification of the class, i.e. information about
included headers, instance data, methods, etc.
The section \fBClass Specification API\fR below explains the
commands available to the developer.
.PP
.SH "CLASS SPECIFICATION API"
.TP
\fBconstructor\fR \fIbody\fR ?\fIpostbody\fR?
This command specifies the C code for the construction,
i.e. allocation of instance structures.
While technically optional in practice it should be specified.
.sp
The C code in \fIbody\fR has to contain the statements
initializing the instance structure, which is accessible through the
variable \fBinstance\fR.
It further has access to the variable \fBinterp\fR, a pointer to the
Tcl interpreter the command is created in, enabling it to set an error
message should the construction fail.
The C code in \fIpostbody\fR is then responsible for connecting the
\fBinstance\fR with the created Tcl command, accessible through the
variable \fBcmd\fR, of type \fBTcl_Command\fR.
.sp
If the instance structure is specified as a series of
\fBfield\fRs then the system will automatically generate code to
allocate the instance structure.
It will also provide a label \fBerror:\fR to jump to in case of a
failure, at which point the instance will be cleaned up and NULL
returned as the result of the constructor, to notify the calling
environment of that failure.
.sp
Otherwise, i.e. for an external \fBtype\fR all of this,
i.e. allocation, possible deallocation on failure, etc. will be the
responsibility of the \fIbody\fR and writer of the class.
.TP
\fBdestructor\fR \fIbody\fR
This command specifies the C code for the destruction, i.e. release of
instance structures.
While technically optional in practice it should be specified.
.sp
The \fIbody\fR has to contain the code releasing the contents
of the instance structure, accessible through the variable
\fBinstance\fR.
.sp
If the instance structure is specified as a series of
\fBfield\fRs then the system will automatically generate code to free
the instance structure (not the fields) after the \fIbody\fR was run.
It will further generate a \fBdestroy\fR method too, owing to its
knowledge of the instance structure, i.e. the existence of field
\fBcmd\fR.
Otherwise, i.e. for an external \fBtype\fR it is the responsibility of
the \fIbody\fR to free the structure itself as well.
.TP
\fBfield\fR \fIctype\fR \fIname\fR ?\fIcomment\fR?
This command specifies a field in the instance structure of the class,
naming it, the C type used, and possibly a comment. Multiple fields
can be specified, and are saved in the order specified.
This specification is mutually exclusive with the use of an external C
\fBtype\fR for the instance structure.
.sp
Note that for this way of declaring the instance data the
system will automatically generate code for the basic allocation and
release of the instance structure. The constructor and destructor C
code supplied by the user has to deal only with the specified fields.
.sp
Note further that in this case a predefined field \fBcmd\fR of
type \fBTcl_Command\fR is present, to allow the association of
instance structure and instance command. And the \fIpostbody\fR will
implictly contain the assignment
.CS


    instance->cmd = cmd;

.CE
.TP
\fBinclude\fR \fIpath\fR
This command specified the path of a header file to include within the
code generated for the class. This is separate from the \fBsupport\fR
because these include will be at the very beginning of the generated
code to allow the use of the import declarations within the instance
type, etc.
.TP
\fBmdef\fR \fIname\fR \fIbody\fR
This command specifies a method and the C code implementing it. The
body has access to the variables
.RS
.TP
\fBinstance\fR
.TP
\fBinterp\fR
.TP
\fBobjc\fR
.TP
\fBobjv\fR
.RE
.TP
\fBmdef\fR \fIname\fR \fBas\fR \fIfunname\fR ?\fIarg\fR...?
This variant of the command above defines a method of the class as
implemented by the external function \fIfunname\fR, i.e. which is
declared outside of the class code itself.
.sp
It is assumed that the first four arguments of that function
represent the parameters
.RS
.TP
\fBinstance\fR
.TP
\fBinterp\fR
.TP
\fBobjc\fR
.TP
\fBobjv\fR
.RE
.IP
Any additional arguments specified will be added after these and are
passed into the C code as is, i.e. are considered to be C expressions.
.sp
Note that the system automatically generates a method
\fBdestroy\fR when the instance structure is specified as a series
of \fBfield\fRs.
.TP
\fBsupport\fR \fIcode\fR
This command specifies the \fIsupport\fRing C code, i.e. any
definitions (types, functions, etc.) needed by the \fIwhole\fR class.
It is optional, i.e. if the class doesn't need supporting code, this
command can be left out of the specification.
.TP
\fBtype\fR \fIname\fR
This command specifies the name of an external C type, i.e. found
outside of the class definition itself, for the instance
structure.
This specification is mutually exclusive with the declaration of the
structure as a series of \fBfield\fRs within the class definition
itself.
.sp
It is the responsibility of the constructor and destructor C
code to allocate and release this structure, and its contents.
.PP
.SH EXAMPLE
The example shown below is the specification of queue data structure,
with most of the method implementations and support code omitted to
keep the size down.
.PP
The full implementation can be found in the directory
"\fIexamples/queue\fR" of the critcl source distribution/repository.
.CS


package require Tcl 8.4
package require critcl 3.1

critcl::buildrequirement {
    package require critcl::class ; # DSL, easy spec of Tcl class/object commands.
}

critcl::cheaders util.h

critcl::class::def ::queuec {
    include util.h

    field Tcl_Obj* unget  {List object unget elements}
    field Tcl_Obj* queue  {List object holding the main queue}
    field Tcl_Obj* append {List object holding new elements}
    field int      at     {Index of next element to return from the main queue}

    constructor {
	instance->at     = 0;
	instance->unget  = Tcl_NewListObj (0,NULL);
	instance->queue  = Tcl_NewListObj (0,NULL);
	instance->append = Tcl_NewListObj (0,NULL);

	Tcl_IncrRefCount (instance->unget);
	Tcl_IncrRefCount (instance->queue);
	Tcl_IncrRefCount (instance->append);
    }

    destructor {
	Tcl_DecrRefCount (instance->unget);
	Tcl_DecrRefCount (instance->queue);
	Tcl_DecrRefCount (instance->append);
    }

    support {... queue_peekget, queue_size, etc.}

    mdef clear {...}
    mdef destroy {...}

    mdef get  as queue_peekget 1
    mdef peek as queue_peekget 0

    mdef put {...}

    mdef size {
	/* Syntax: queue size
	 *	       [0]   [1]
	 */

	if ((objc != 2)) {
	    Tcl_WrongNumArgs (interp, 2, objv, NULL);
	    return TCL_ERROR;
	}

	Tcl_SetObjResult  (interp, Tcl_NewIntObj (queue_size (instance, NULL, NULL, NULL)));
	return TCL_OK;
    }

    mdef unget {...}
}

package provide queuec 1

.CE
.SH AUTHORS
Andreas Kupries
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems.
Please report such at \fIhttps://github.com/jcw/critcl\fR.
Please also report any ideas for enhancements you may have for either
package and/or documentation.
.SH KEYWORDS
C class, C code, C instance, C object, Embedded C Code, code generator, compile & run, compiler, dynamic code generation, dynamic compilation, generate package, linker, on demand compilation, on-the-fly compilation
.SH CATEGORY
Glueing/Embedded C code
.SH COPYRIGHT
.nf
Copyright (c) 2011-2012 Andreas Kupries

.fi